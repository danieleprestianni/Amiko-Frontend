# when commandscheduler is waiting for a response, the associated thread will wait for sleepTimeMsec milliseconds
commandscheduler.sleep.time.msec=100
# after this time interval, the command retry will be incremented of 1 unit 
commandscheduler.max.waiting.time=2000
# max number of retries for a command
commandscheduler.max.retries=3
# time interval between two connection attempts
maincontroller.retry.interval=2000
app.version=Beta.0.7
app.devmode.enabled=false
# INTAKE RULE N°1
# Pattern:
# OPEN (1) - VIBRATION (0..n) - PROXIMITY (1..n) - VIBRATION (0..n) - CLOSE (1)
# 
# 1) se il pattern contiene un evento di BREATH questo non soddisferà la regola
# 2) per ogni pattern esiste almeno un evento PROXIMITY che soddisfi le CONDIZIONI
#
# Condizione n°1 - N - CLOSE.wrk_time - OPEN.wrk_time < N
dataanalysis.rules.intakerule1.maxopencloseduration=120
# Condizione n°2 - M - CLOSE.wrk_time - OPEN.wrk_time > M
dataanalysis.rules.intakerule1.minopencloseduration=4
# Condizione n°3 - K1 - PROXIMITY.enter<K1
dataanalysis.rules.intakerule1.enterthershold=2200
# Condizione n°4 - K2 - PROXIMITY.exit<K2
dataanalysis.rules.intakerule1.exitthershold=2200
# Condizione n°5 - K3 - PROXIMITY.evt_time> K3
dataanalysis.rules.intakerule1.minproximityeventtime=13
# Condizione n°6 - K4 - PROXIMITY.evt_time< K4
dataanalysis.rules.intakerule1.maxproximityeventtime=95
# Condizione n°7 - K5 - PROXIMITY.wrk_time - OPEN.wrk_time > K5
dataanalysis.rules.intakerule1.minworktimerelativetoopen=3
# Condizione n°8 - K6 - PROXIMITY.wrk_time - OPEN.wrk_time < K6
dataanalysis.rules.intakerule1.maxworktimerelativetoopen=100